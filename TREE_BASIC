//code for making a preorder tree
 public class Treebasiz{

    //static class node that will have all the doing
    static class Node{
        int data;
       Node left;
       Node right;
       public Node(int data){
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }
    static class BinaryTree{
        //for starting the index and static so that it can use in recurssion
        static int idx=-1;

        //function building the tree
        public static Node buildtree(int[] nodes){
            idx++;
            if(nodes[idx]==-1){
                return null;
            }
            Node newNode=new Node(nodes[idx]);

            // calling the functtion so each time new node will make and get the posituion
            newNode.left=buildtree(nodes);
            newNode.right=buildtree(nodes);

            //returning node at end so that our rooot will be given back 
            return newNode;
        } 
    }
   
    public static void main(String[] args) {

        //calling the function in tree
        int[] nodes={1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
        BinaryTree tree=new BinaryTree();
        System.out.println(tree.buildtree(nodes).data);
        
    }
}

//for level order traversal 

 	 public void levelOrder(Node root){
            if(root==null){
                return;
            }

            //to add data in queue 
            Queue<Node> q=new LinkedList<>();
            q.add(root);
            q.add(null);
            //so when there is null we knw we hv to move in next line
            while(!q.isEmpty()){
                Node curr=q.remove();
                if(curr==null){

                    System.out.println();
                    if(q.isEmpty()){
                        break;
                    }else{
                        q.add(null);
                    }
                }else{
                    
                    System.out.print(curr.data);
                    if(curr.left!=null){
                        q.add(curr.left);
                    }if(curr.right!=null){
                        q.add(curr.right);
                    }
                }
            }


//for height of tree
public int height(Node root){
    if(root==null){
        return 0;
    }
    int lh=height(root.left);
    int rh=height(root.right);
    return Math.max(lh, rh)+1;

}

//for counting the noddes
public int count(Node root){
    if(root==null){
        return 0;
    }
    int lh=count(root.left);
    int rh=count(root.right);
    return lh+rh+1;

}

//sum of the nodes of tree
public int count(Node root){
    if(root==null){
        return 0;
    }
    int lh=count(root.left);
    int rh=count(root.right);
    return lh+rh+root.data;

}



//for diameter of tree with O(n2)    
public int count(Node root){
    if(root==null){
        return 0;
    }
    int lh=count(root.left);
    int rh=count(root.right);
    return Math.max(lh, rh)+1;


}

public int diameter(Node root){
    if(root==null){
        return 0;
    }

    //for getting the diameter of left

    int lftdia=diameter(root.left);
    //for getting the max height

    int lfthght=count(root.left);

    int rghtdia=diameter(root.right);

    int rghtheght=count(root.right);

    //for getting the self diameter
    int slfdia=lfthght+rghtheght+1;
    //for getting the max value of self dia meter or left or right diameter
     int ans=Math.max(slfdia,Math.max(rghtdia, lftdia));
    return ans;
}


//for getting the diameter of tree with O(n)
///creating a class that can store both diam and height
static class info{
    int diam;
    int height;
    info(int diam,int height){
        this.diam=diam;
        this.height=height;
    }
}


public info diameter(Node root){
    if(root==null){
        return new info(0, 0);
    }
    

    //for getting the diameter of left
    info lftdia=diameter(root.left);
    
    info rghtdia=diameter(root.right);

    //calculating the diameter and height
    int selfdiam=lftdia.height+rghtdia.height+1;
    int finaldiam=Math.max(Math.max(lftdia.diam, rghtdia.diam),selfdiam);
    int heightt=Math.max(lftdia.height, rghtdia.height)+1;
    //for storing both the diameteer and height in the new class
    return new info(finaldiam, heightt);

}

//to find a subrot in a tree
//helping function to help to find the subtree

public static boolean isIdentical(Node root,Node subroot){
    if(subroot==null&&root==null){
        return true;
    //if one node is  null or both node are not same    
    }else if(subroot==null||root==null||subroot.data!=root.data){
        return false;

    }

    //is left node is not equal
    if(!isIdentical(root.left, subroot.left)){
        return false;
    }
    //if right is not equal
    if(!isIdentical(root.right, subroot.right)){
        return false;
    }

    return true;
}

public static boolean subtree(Node root,Node subroot){
    if(root==null){
        return false;
    }

    //here we are taking our helping function help
    //to do the work
    if(root.data==subroot.data){
        if(isIdentical(root, subroot)){
            return true;
        }
    }

    //checking for the right and left of our main subtree
    boolean lft=subtree(root.left, subroot);
    boolean rght=subtree(root.right, subroot);
    return lft||rght;
   
}

//top view 
    //new class for storing info
    static class info{
        int hd;
        Node node;
        info( Node node,int hd){
            this.node=node;
            this.hd=hd;
        }

    }
    public static void topview(Node root){


    //create queue of type info class
        Queue<info> q=new LinkedList<>();

        //stores position and root
        q.add(new info(root,0));
        q.add(null);
       // int keyy=0;
        HashMap<Integer,Node> hm=new HashMap<>();
        hm.put(0,root);
        int min=0,max=0;
       // int lftkeyy=0,rghtkeyy=0;
        while(!q.isEmpty()){
        info curr=q.remove();
           if(curr==null){
                //System.out.println();
                
           
                if(q.isEmpty()){
                       
                    break;
                }else{
                    
                    q.add(null);
                }
                }
                else{
                    //Node currr=curr.node;
                    //if position is not taken add in map
                if(!hm.containsKey(curr.hd)){
                    hm.put(curr.hd, curr.node);
                }

                //for the left
                if(curr.node.left!=null){
                    q.add(new info(curr.node.left, curr.hd-1));
                    min=Math.min(curr.hd-1, min);
                    
                }

                //for the right 
                if(curr.node.right!=null){
                    q.add(new info(curr.node.right, curr.hd+1));
                    max=Math.max(curr.hd+1, max);
                    
                }
            }
                
                
               
            

        }
        for(int i=min;i<=max;i++){
            System.out.print(hm.get(i).data+" ");
        }


    }

//kth level order
 public static void kthlevel(Node root,int k,int temp){

        if(root==null){
            return ;
        }

        //if our level became same then print the data
        if(temp==k){
            System.out.print(root.data+" ");

            //when we got to our level return it because we dnt hv to go 
            //further left or right
            return;
        }

        //for left and right traversal
        kthlevel(root.left, k, temp+1);
        kthlevel(root.right, k, temp+1);
       // return ;
    }

//lowest common ancestor
  //for getting the path
    public static boolean getpath(Node root,int n,ArrayList<Node> path){
       
        if(root==null){
            return false;
        }

        // for adding node in path
         path.add(root);
        if(root.data==n){
            return true;
        }
        
        //for checking if node is in left or right
        boolean lft=getpath(root.left, n, path);
        boolean rght=getpath(root.right, n, path);
        if(lft||rght){
            return true;
        }

        // if node is not present remove it
        path.remove(path.size()-1);
       return false;

    }

    //to find the lowst comon ancestor
    public static int lca(Node root,int n1,int n2){

        //creating the arraylist
         ArrayList<Node> path1=new ArrayList<>();
         ArrayList<Node> path2=new ArrayList<>();

         //getting the path of bth nodes
        getpath(root, n2, path2);
        getpath(root, n1, path1);

     
    
            int i=0;

            //id list is not equal then break that will be our lowest ancestor
            for(;i<path1.size()&&i<path2.size();i++){
                if(path1.get(i)!=path2.get(i)){
                    break;
                }
              
            }
            return path1.get(i-1).data;
       

    }

//for finding the lowest common ancestor without using extra space
public static Node findLca(Node root,int n1,int n2){

        //if any value matches it will return the node
        if(root==null||root.data==n1||root.data==n2){
            return root;
        }

        //this is for finding the if our lca is present in left or right of the root
        Node leftlca=findLca(root.left, n1, n2);
        Node rghtLca=findLca(root.right, n1, n2);

        //check for present of our lca
           if(rghtLca==null){
            return leftlca;
        }
        if(leftlca==null){
            return rghtLca;
        }
     
        // if our lca is not present in left or right
        //then it is oour root
        return root;

    }


//for getting the min distnace betwwen two node
//in this we use two helper function on for getting the individual dis from lca to node
//one for getting the lca

    public static int minDistance(Node root,int n1,int n2){
       Node lca= findLca(root, n1, n2);
       int lftdis=lcadist(lca,n1);
       int rghtdis=lcadist(lca,n2);
       return lftdis+rghtdis;
    }
  public static Node findLca(Node root,int n1,int n2){

        //if any value matches it will return the node
        if(root==null||root.data==n1||root.data==n2){
            return root;
        }

        //this is for finding the if our lca is present in left or right of the root
        Node leftlca=findLca(root.left, n1, n2);
        Node rghtLca=findLca(root.right, n1, n2);

        //check for present of our lca
                if(leftlca==null){
            return rghtLca;
        }
           if(rghtLca==null){
            return leftlca;
        }

     
        // if our lca is not present in left or right
        //then it is oour root
        return root;

    }

    //for checking the distance from lca
    public static int lcadist(Node root,int n){

        //return -1 so the node is not this side
        if(root==null){
            return -1;
        }
        if(root.data==n){
            return 0;  
        }

        //cheking in right and left od subtree
        int lftt=lcadist(root.left, n);
        int rghtt=lcadist(root.right, n);

        //we are doing this so that we dont get the dist from both side
        if(lftt==-1&&rghtt==-1){
            return -1;
        }else if(lftt==-1){
            return rghtt+1;
        }else{
            return lftt+1;
        }
    }

//to find the kth ancestor 
public static int kthancstor(Node root,int k,int n){

        //if root becomes nulll return -1
        if(root==null){
            return -1;
        }

        //if we find the data return 0
        if(root.data==n){
            return 0;
        }

        //to check for the left and right of the tree 
        int lftdis=kthancstor(root.left, k, n);
        int rghtdis=kthancstor(root.right, k, n);

        //if we didnt find node it return -1
        if(lftdis==-1&&rghtdis==-1){
            return -1;
        }

        //return the distance
    
            int dis=Math.max(lftdis, rghtdis);
/
            //if we add 1 to the dis equal to Klevel then our root is kthancestor
            if(dis+1==k){

                //return the data  o f root
                System.out.println(root.data);
            }
           // return the distance
            return dis+1;
        
    }

//sumsubtree
public static int sumsubtree(Node root){
        if (root==null){
            return 0;
        }


        int lft=sumsubtree(root.left);
        int rght=sumsubtree(root.right);


        int data=root.data;
        //these are both for when u r on leaf for return the data
        int newlft=0;
        int newrght=0;

        //when ur one side is null
        if(root.left!=null){
                newlft=root.left.data;
        }else{
            newlft=0;
        }

        if(root.right!=null){
                newrght=root.right.data;
        }else{
            newrght=0;
        }

        root.data=lft+rght+newlft+newrght;
         return data;

    }

Given a Binary Tree. Find the Zig-Zag Level Order Traversal of the Binary Tree.

 

Example 1:

Input:
        1
      /   \
     2     3
    / \   /  \
   4   5 6    7
Output:
1 3 2 4 5 6 7
class GFG
{
    //Function to store the zig zag order traversal of tree in a list.4

    
	ArrayList<Integer> zigZagTraversal(Node root)
	{
	     
	    //Add your code here.
	    ArrayList<Integer> al=new ArrayList<Integer>();
	    Queue<Node> q=new LinkedList<>();
	    q.add(root);
	    q.add(null);
	    Stack<Integer> s=new Stack<>();
	    int k=1;
	    while(!q.isEmpty()){
	       Node curr=q.remove();
	       if(curr==null){
	           if(q.isEmpty()){
	               break;
	           }else{
	               q.add(null);
	           }
	           k+=1;
	       }else{
	           
	           // so that we can get the nodes in reverse order
	           if(k%2!=0){
	               while(!s.isEmpty()){
	                   al.add(s.pop());
	               }
	                   al.add(curr.data);    
	           }else{
	               s.push(curr.data);
	           }
	           
	           // we cant change them for reverse order
	           //because by chnaging we are chaning the left and right
	           //of the original tree
	       
	        if(curr.left!=null){
	            q.add(curr.left);
	        }
	        if(curr.right!=null){
	            q.add(curr.right);
	        }
	      
	       
	       }
	    }
	    while(!s.isEmpty()){
	        al.add(s.pop());
	    }
	   
        
	   return al;
	    
	    
	}
}

Given a binary tree, find out whether it contains a duplicate sub-tree of size two or more, or not.

Note: Two same leaf nodes are not considered as subtree as size of a leaf node is one. 

Example 1 :

Input : 
               1
             /   \ 

           2       3
         /   \       \    
        4     5       2     
                     /  \    
                    4    5
Output : 1
Explanation : 
    2     
  /   \    
 4     5
is the duplicate sub-tree.

class Solution {
    String inorder(Node root,HashMap<String,Integer> hm){
        if(root==null){
            return "";
        }
        String str="(";
        str+=inorder(root.left,hm);
        str+=Integer.toString(root.data);
        str+=inorder(root.right,hm);
        str+=")";
        if(str.length()>4){
        if(!hm.containsKey(str)){
            hm.put(str,1);
        }else{
            hm.put(str,hm.get(str)+1);
        }}
        return str;
        
        
        
        
        
    }
    int dupSub(Node root) {
        // code here
        HashMap<String,Integer> hm=new HashMap<>();
        inorder( root,hm);
        Set<String> hmm=hm.keySet();
        for(String strr:hmm){
            if(hm.get(strr)>1){
                return 1;
            }
        }
        return 0;
    }
}

Given a Binary Tree with all unique values and two nodes value, n1 and n2. The task is to find the lowest common ancestor of the given two nodes. We may assume that either both n1 and n2 are present in the tree or none of them are present.

LCA: It is the first common ancestor of both the nodes n1 and n2 from bottom of tree.

Example 1:

Input:
n1 = 2 , n2 = 3  
       1 
      / \ 
     2   3
Output: 1
Explanation:
LCA of 2 and 3 is 1.

class Solution
{
    //Function to return the lowest common ancestor in a Binary Tree.
    
    // for path
    boolean path(Node root,int num,ArrayList<Node> al){
        if(root==null){
            return false;
        }
        al.add(root);
        if(root.data==num){
            return true;
        }
        boolean lft=path(root.left,num,al);
        boolean rght=path(root.right,num,al);
        if(lft||rght){
            return true;
        }
        al.remove(al.size()-1);
        return false;
        
    }
    
	Node lca(Node root, int n1,int n2)
	{
		// Your code here
		ArrayList<Node> al1=new ArrayList<>();
		ArrayList<Node> al2=new ArrayList<>();
		path(root,n1,al1);
		path(root,n2,al2);
		int i=0;
		for(;i<al1.size()&&i<al2.size();i++){
		    if(al1.get(i)!=al2.get(i)){
		        break;
		    }
		}
		return al1.get(i-1);
		
		
	}
}

The diameter of a tree (sometimes called the width) is the number of nodes on the longest path between two end nodes. The diagram below shows two trees each with diameter nine, the leaves that form the ends of the longest path are shaded (note that there is more than one path in each tree of length nine, but no path longer than nine nodes). 



Example 1:

Input:
       1
     /  \
    2    3
Output: 3
class Solution {
    // Function to return the diameter of a Binary Tree.inf
    static class info{
        int h;
        int d;
        info(int d,int h){
            this.h=h;
            this.d=d;
        }
    }
    info diam(Node root){
        if(root==null){
            return (new info(0,0));
        }
        info leftdia=diam(root.left);
        info rghtdia=diam(root.right);
        int slfdiam=leftdia.h+rghtdia.h+1;
        int hght=Math.max(leftdia.h,rghtdia.h)+1;
        int maxx=Math.max(leftdia.d,rghtdia.d);
        int diaa=Math.max(slfdiam,maxx);
        return (new info(diaa,hght));
    }
    
    int diameter(Node root) {
        // Your code here
        if(root==null){
            return 0;
        }
        return diam(root).d;
        
        
    }
}
Given a binary tree, print the bottom view from left to right.
A node is included in bottom view if it can be seen when we look at the tree from bottom.

                      20
                    /    \
                  8       22
                /   \        \
              5      3       25
                    /   \      
                  10    14

For the above tree, the bottom view is 5 10 3 14 25.
If there are multiple bottom-most nodes for a horizontal distance from root, then print the later one in level traversal. For example, in the below diagram, 3 and 4 are both the bottommost nodes at horizontal distance 0, we need to print 4.
class Solution
{
    //Function to return a list containing the bottom view of the given tree.
    static class info{
        int pos;
        Node node;
        info(int pos, Node node){
            this.pos=pos;
            this.node=node;
        }
    }
    public ArrayList <Integer> bottomView(Node root)
    {
        // Code here
        // add your code
        

      HashMap<Integer,Node> hm=new HashMap<>();
      Queue<info> q=new LinkedList<>();
      q.add(new info(0,root));
      q.add(null);
      int key=0;
      hm.put(key,root);
      int min=0,max=0;
      ArrayList<Integer> al=new ArrayList<>();
      while(!q.isEmpty()){
          info curr=q.remove();
          if(curr==null){
              if(q.isEmpty()){
                  break;
              }
              else{
                  q.add(null);
              }
          }else{
              
                  hm.put(curr.pos,curr.node);
              
              if(curr.node.left!=null){
                  q.add(new info(curr.pos-1,curr.node.left));
                  min=Math.min(curr.pos-1,min);
              }
              if(curr.node.right!=null){
                  q.add(new info(curr.pos+1,curr.node.right));
                  max=Math.max(max,curr.pos+1);
              }
             // key=key+1;
          }
      }
      for(int i=min;i<=max;i++){
          al.add(hm.get(i).data);
      }
      return al;
    }
}

Given a binary tree of size N. Your task is to complete the function sumOfLongRootToLeafPath(), that find the sum of all nodes on the longest path from root to leaf node.
If two or more paths compete for the longest path, then the path having maximum sum of nodes is being considered.

Example 1:

Input: 
        4        
       / \       
      2   5      
     / \ / \     
    7  1 2  3    
      /
     6
Output: 13
Explanation:
        4        
       / \       
      2   5      
     / \ / \     
    7  1 2  3 
      /
     6

The highlighted nodes (4, 2, 1, 6) above are 
part of the longest root to leaf path having
sum = (4 + 2 + 1 + 6) = 13
class Solution{
    int height(Node root){
        if(root==null){
            return 0;
        }
        int lh=height(root.left);
        int rh=height(root.right);
        return Math.max(lh,rh)+1;
    }
    
    
    void leafroot(Node root,int level,int k,ArrayList<Node> al){
        if(root==null){
            return;
        }
        
        if(level==k){
            al.add(root);
            return ;
        }
        
        leafroot(root.left,level+1,k,al);
        leafroot(root.right,level+1,k,al);
    
        
    }
    
    
    int findsum(Node root,Node num,int currsum){
        if(root==null){
            return 0;
        }
        currsum+=root.data;
        if(root==num){
            return currsum;
        }
        


        
        
        int lh=findsum(root.left,num,currsum);
        int rh=findsum(root.right,num,currsum);
        return Math.max(lh,rh);
        
    }
    
    
    
    
    public int sumOfLongRootToLeafPath(Node root)
    {
        //code here
        int h=height(root);
        
        ArrayList<Node> al=new ArrayList<>();
        
        leafroot(root,1,h,al);
        
        //System.out.println(al.get(0));
        
        PriorityQueue<Integer> pq=new PriorityQueue<>();
        for(int i=0;i<al.size();i++){
            //int currsum=0;
            pq.add(findsum(root,al.get(i),0));
            
        }
        
        int tem=0;
        int num=al.size();
        int i=0;
        while(i<num){
            tem=pq.poll();
            //System.out.println(tem);
            i++;
        }
        return tem;
        
        
    
        
    }
}

We've got offers as great as this problem! Explore Geek Week 2023

banner
Given a binary tree and two node values your task is to find the minimum distance between them.
The given two nodes are guaranteed to be in the binary tree and nodes are numbered from 1 to N.
Please Note that a and b are not always leaf node.

Example 1:

Input:
        1
      /  \
     2    3
a = 2, b = 3
Output: 2
Explanation: The tree formed is:
       1
     /   \ 
    2     3
We need the distance between 2 and 3.
Being at node 2, we need to take two
steps ahead in order to reach node 3.
The path followed will be:
2 -> 1 -> 3. Hence, the result is 2. 
class GfG {
    
    boolean path(Node root,int num,ArrayList<Node> al){
        if(root==null){
            return false;
        }
        al.add(root);
        if(root.data==num){
            return true;
        }
        boolean lft=path(root.left,num,al);
        boolean rght=path(root.right,num,al);
        if(lft||rght){
            return true;
        }
        al.remove(al.size()-1);
        return false;
        
    }
    
	Node lca(Node root, int n1,int n2)
	{
		// Your code here
		ArrayList<Node> al1=new ArrayList<>();
		ArrayList<Node> al2=new ArrayList<>();
		path(root,n1,al1);
		path(root,n2,al2);
		int i=0;
		for(;i<al1.size()&&i<al2.size();i++){
		    if(al1.get(i)!=al2.get(i)){
		        break;
		    }
		}
		return al1.get(i-1);
		
		
	}
	
	int getdis(Node root,int n,int currsum){
	    if(root==null){
	        return 0;
	    }
	    currsum+=1;
	    if(root.data==n){
	        return currsum;
	    }
	    int lc=getdis(root.left,n,currsum);
	    int rc=getdis(root.right,n,currsum);
	    return Math.max(lc,rc);
	    
	    
	}
    
    
    int findDist(Node root, int a, int b) {
        // Your code here
        Node lcaa=lca(root,a,b);
        int dis1=getdis( lcaa,a,0);
        int dis2=getdis( lcaa,b,0);
        return dis1+dis2-2;
        
    }
}

Given a Binary Tree, print the diagonal traversal of the binary tree.

Consider lines of slope -1 passing between nodes. Given a Binary Tree, print all diagonal elements in a binary tree belonging to same line.
If the diagonal element are present in two different subtress then left subtree diagonal element should be taken first and then right subtree. 

Example 1:

Input :
            8
         /     \
        3      10
      /   \      \
     1     6     14
         /   \   /
        4     7 13
Output : 8 10 14 3 6 7 13 1 4
Explanation:
unnamed
Diagonal Traversal of binary tree : 
 8 10 14 3 6 7 13 1 4

class Tree
{
     public ArrayList<Integer> diagonal(Node root)
      {
           //add your code here.
           Queue<Node> q=new LinkedList<>();
           ArrayList<Integer> al=new ArrayList<>();
           q.add(root);
           q.add(null);
          // al.add(root.data);
           while(!q.isEmpty()){
               Node curr=q.remove();
               if(curr==null){
               if(q.isEmpty()){
                   break;
               }
               else{
                   q.add(null);
               }
           }
           
           else
           {
               
               // for making it to traverse at diagnal
             al.add(curr.data);
              while(curr!=null){
              
                 //all the left of diagnal will be at diff diagnl
                 //so it will be added to queue
                if(curr.left!=null){
                    q.add(curr.left);
                }
                
                // all the right elelements of the curr will be at same diagnal
                //so it will get printed
                 if(curr.right!=null){
                    al.add(curr.right.data);
               
                
                }
                //for traversing to right to add all the node in same diagnol 
                  curr=curr.right;
              

                }
        
            }
               
        }
           //System.out.println();
        return al;
           
    }
}

Given a binary tree in which each node element contains a number. Find the maximum possible path sum from one special node to another special node.

Note: Here special node is a node which is connected to exactly one different node.


Example 1:

Input:      
           3                               
         /    \                          
       4       5                     
      /  \      
    -10   4                          
Output: 16
Explanation:
Maximum Sum lies between special node 4 and 5.
4 + 4 + 3 + 5 = 16.

class Solution
{
    int findIt(Node root,int ans,ArrayList<Integer> al){
        if(root==null){
            return 0;
        }
        if(root.left==null&&root.right==null){
            return root.data;
            
        }
         if(root.left==null){
            return (findIt(root.right,ans,al)+root.data);}
         if(root.right==null){
            return (findIt(root.left,ans,al)+root.data);
        }
        int l=findIt(root.left,ans,al);
        int r=findIt(root.right,ans,al);
        
        ans=Math.max(ans,l+r+root.data);
        al.add(ans);
        return (Math.max(l,r)+root.data);
    }

    int maxPathSum(Node root)
    { 
        // code here
        ArrayList<Integer> al=new ArrayList<>();
        int ans=Integer.MIN_VALUE;
        int t=findIt(root,ans,al);
        int max=Integer.MIN_VALUE;
        for(int i=0;i<al.size();i++){
            if(max<al.get(i)){
                max=al.get(i);
            }        
            
        }
        if(root.left==null||root.right==null){
            max=Math.max(t,max);
        }
        
        return max;
    }
}

Given a binary tree, a target node in the binary tree, and an integer value k, find all the nodes that are at distance k from the given target node. No parent pointers are available.
Note:

You have to return the list in sorted order.
The tree will not contain duplicate values.
Example 1:

Input:      
          20
        /    \
      8       22 
    /   \
   4    12 
       /   \
      10    14
Target Node = 8
K = 2
Output: 10 14 22
Explanation: The three nodes at distance 2
from node 8 are 10, 14, 22.
class Solution
{
 //for the subtree of the node
    static void subtr(Node  root,int k,ArrayList<Integer> al){
        if(root==null){
            return;
        }
        if(k==0){
            al.add(root.data);
        }
        subtr(root.left,k-1,al);
        subtr(root.right,k-1,al);
    
    }
    
    static int findD(Node root,int target,int k,ArrayList<Integer> al){
        if(root==null){
            return -1;
        }
        
        if(root.data==target){
            subtr(root,k,al);
            return 0;
        }
        
        int dl=findD(root.left,target,k,al);
        
        
        //target in the in left subtree
        //it will now look int right subtree
        if(dl!=-1){
            
            //beacuse it search for parent
            if(dl+1==k){
                al.add(root.data);
            }
            else{
                
                //we are looking in right 
                //dis left to root then root to right will be 2
                subtr(root.right,k-dl-2,al);
            }
            return 1+dl;
        }
        
        // same as of left
        // it is same
        int dr=findD(root.right,target,k,al);
        if(dr!=-1){
            if(dr+1==k){
                al.add(root.data);
            }
            else{
                subtr(root.left,k-dr-2,al);
            }
            return 1+dr;
            
        }
        return -1;
    }
    
    public static ArrayList<Integer> KDistanceNodes(Node root, int target , int k)
    {
        // return the sorted list of all nodes at k dist
       ArrayList<Integer> al=new ArrayList<>();
        findD(root,target,k,al);
        Collections.sort(al);
        
        return al;
    }
}